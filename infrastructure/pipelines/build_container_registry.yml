variables:
  tf_version: "0.12.28"
  tf_state_rg: "fmm-tfstate-rg"
  tz_state_location: "westeurope"
  tf_state_sa_name: "fmmtfstatesa"
  tf_state_container_name: "fmm-tfstate"
  tf_state_tags: ("env=dev" "deployedBy=turelit")
  tf_environment: "dev"
  SUBSCRIPTION_NAME: "Azure-1"

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Azure subscription 1(ff581936-424c-495e-a9ed-0c247bdd4d78)'
    KeyVaultName: 'fmm-dev'
    SecretsFilter: 'cr-create'
    RunAsPreJob: true
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: "Install Terraform $(tf_version)"
  inputs:
    terraformVersion: "$(tf_version)"
- task: AzureCLI@2
  displayName: "Create/Check the Terraform Statefile Azure Storage Account"
  inputs:
    azureSubscription: "$(SUBSCRIPTION_NAME)"
    addSpnToEnvironment: true
    scriptType: "bash"
    scriptLocation: "inlineScript"
    inlineScript: |
      TAGS=$(tf_state_tags)
      az group create --name $(tf_state_rg) --location $(tz_state_location) --tags "${TAGS[@]}"
      az storage account create --resource-group $(tf_state_rg) --name $(tf_state_sa_name) --sku Standard_GRS --encryption-services blob --tags "${TAGS[@]}"
      ACCOUNT_KEY=$(az storage account keys list --resource-group $(tf_state_rg) --account-name $(tf_state_sa_name) --query [0].value -o tsv)
      az storage container create --name $(tf_state_container_name) --account-name $(tf_state_sa_name) --account-key $ACCOUNT_KEY
      echo "##vso[task.setvariable variable=tf_state_sa_key]$ACCOUNT_KEY"

- task: TerraformTaskV1@0
  displayName: "Run > terraform init"
  inputs:
    command: "init"
#    commandOptions: -backend-config="storage_account_name=$(tf_state_sa_name)" -backend-config="container_name=$(tf_state_container_name)" -backend-config="access_key=$(ACCOUNT_KEY)" -backend-config="key=$(dev.terraform.tstate)"
    backendServiceArm: "$(SUBSCRIPTION_NAME)"
    backendAzureRmResourceGroupName: "$(tf_state_rg)"
    backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
    backendAzureRmContainerName: $(tf_state_container_name)
    backendAzureRmKey: "$(tf_environment).terraform.tstate"
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform/'

- task: TerraformTaskV1@0
  displayName: "Run > terraform plan"
  inputs:
    command: "plan"
    backendServiceArm: "$(SUBSCRIPTION_NAME)"
    backendAzureRmResourceGroupName: "$(tf_state_rg)"
    backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
    backendAzureRmContainerName: $(tf_state_container_name)
    backendAzureRmKey: "$(tf_environment).terraform.tstate"
    commandOptions: -var db_pass="placeholder" -var cr_pass="placeholder" -var cr_user="placeholder" -target=module.container-registry -out="out.plan"
    environmentServiceNameAzureRM: "$(SUBSCRIPTION_NAME)"
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform/'

- task: TerraformTaskV1@0
  displayName: "Run > terraform apply"
  inputs:
    command: "apply"
    backendServiceArm: "$(SUBSCRIPTION_NAME)"
    backendAzureRmResourceGroupName: "$(tf_state_rg)"
    backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
    backendAzureRmContainerName: $(tf_state_container_name)
    backendAzureRmKey: "$(tf_environment).terraform.tstate"
    commandOptions: out.plan
    environmentServiceNameAzureRM: "$(SUBSCRIPTION_NAME)"
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform/'

- task: TerraformTaskV1@0
  displayName: "Run > terraform plan"
  inputs:
    command: "plan"
    backendServiceArm: "$(SUBSCRIPTION_NAME)"
    backendAzureRmResourceGroupName: "$(tf_state_rg)"
    backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
    backendAzureRmContainerName: $(tf_state_container_name)
    backendAzureRmKey: "$(tf_environment).terraform.tstate"
    commandOptions: -var db_pass="placeholder" -var cr_pass="placeholder" -var cr_user="placeholder" -target=module.container-registry -out="out.plan"
    environmentServiceNameAzureRM: "$(SUBSCRIPTION_NAME)"
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform/'

- task: TerraformTaskV1@0
  displayName: "Run > terraform apply"
  inputs:
    command: "apply"
    backendServiceArm: "$(SUBSCRIPTION_NAME)"
    backendAzureRmResourceGroupName: "$(tf_state_rg)"
    backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
    backendAzureRmContainerName: $(tf_state_container_name)
    backendAzureRmKey: "$(tf_environment).terraform.tstate"
    commandOptions: out.plan
    environmentServiceNameAzureRM: "$(SUBSCRIPTION_NAME)"
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform/'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    architecture: 'x64'

- script: python -m pip install --upgrade pip
  displayName: 'Upgrade pip'

- script: pip install --pre azure-cli --extra-index-url https://azurecliprod.blob.core.windows.net/edge
  displayName: 'upgrade azure cli'

- script: az --version
  displayName: 'Show Azure CLI version'

- script: az extension add -n azure-devops
  displayName: 'Install Azure DevOps Extension'

- script: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
  env:
    AZURE_DEVOPS_CLI_PAT: $(cr-create)
  displayName: 'Login Azure DevOps Extension'

- script: az devops configure --defaults organization=https://dev.azure.com/turelit project=fundacjaMamMarzenie --use-git-aliases true
  displayName: 'Set default Azure DevOps organization and project'

- script: |
    az devops service-endpoint create --service-endpoint-configuration $(System.DefaultWorkingDirectory)/infrastructure/pipelines/sc_template.json
    git pr list
  displayName: 'Create service connection'